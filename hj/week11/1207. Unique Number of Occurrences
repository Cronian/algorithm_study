class Solution {
    public boolean uniqueOccurrences(int[] arr) {
        
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        
        for(int i=0;i<arr.length;i++) {
            int cnt = (map.get(arr[i]) != null)? map.get(arr[i])+1 : 1;
            map.put(arr[i], cnt);
        }
        
        HashMap<Integer, Integer> map2 = new HashMap<Integer, Integer>();
        
        Iterator<Integer> keys = map.keySet().iterator();
        
        while( keys.hasNext() ){
            int key = keys.next();
            if(map2.get(map.get(key)) != null) {
                return false;
            }
            map2.put(map.get(key), 1);
        }
        
        return true;
    }
}

public class MainClass {
    public static int[] stringToIntegerArray(String input) {
        input = input.trim();
        input = input.substring(1, input.length() - 1);
        if (input.length() == 0) {
          return new int[0];
        }
    
        String[] parts = input.split(",");
        int[] output = new int[parts.length];
        for(int index = 0; index < parts.length; index++) {
            String part = parts[index].trim();
            output[index] = Integer.parseInt(part);
        }
        return output;
    }
    
    public static String booleanToString(boolean input) {
        return input ? "True" : "False";
    }
    
    public static void main(String[] args) throws IOException {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        String line;
        while ((line = in.readLine()) != null) {
            int[] arr = stringToIntegerArray(line);
            
            boolean ret = new Solution().uniqueOccurrences(arr);
            
            String out = booleanToString(ret);
            
            System.out.print(out);
        }
    }
}
