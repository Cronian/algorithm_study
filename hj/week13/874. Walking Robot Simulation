class Solution {
    public int robotSim(int[] commands, int[][] obstacles) {
        int x = 0, y = 0;
        
        int way = -1; // 1 : 세로 -1 : 가로        
        int gb = 0;        
        int ngb = 1;                        
        int max = 0;
        
        for(int i = 0; i < commands.length; i++) {
            
            if(commands[i] < 0) 
            {
                
                way = way * -1;
                
                if(commands[i] == -1) {
                    gb += 90;
                } else {
                    gb -= 90;
                }
                
                if(gb == 360) {
                    gb = 0;
                }
                if(gb < 0) {
                    gb = 270;
                }
                
                                
            }            
            else
            {
                if(gb == 0 || gb == 90) {
                    ngb = 1;
                } else {
                    ngb = -1;
                }
                    
                if(ngb > 0) {
                    //플러스
                    if(way == 1) {

                        forout:
                        for(int z = 1; z <= commands[i]; z++) {
                            for(int j = 0; j < obstacles.length; j++) {
                                if(obstacles[j][1] == x && obstacles[j][0] == y+1) {                                    
                                    if(max < (x*x + y*y) ){
                                        max = (x*x + y*y);
                                    }
                                    
                                    break forout;
                                }
                            }
                            y++;
                        }

                    } else {
                        forout:
                        for(int z = 1; z <= commands[i]; z++) {
                            for(int j = 0; j < obstacles.length; j++) {
                                if(obstacles[j][0] == y && obstacles[j][1] == x+1) {
                                    if(max < (x*x + y*y) ){
                                        max = (x*x + y*y);
                                    }
                                    break forout;
                                }
                            }
                            x++;
                        }
                    }



                } else {
                    //마이너스
                    if(way == 1) {

                        forout:
                        for(int z = 1; z <= commands[i]; z++) {
                            for(int j = 0; j < obstacles.length; j++) {
                                if(obstacles[j][1] == x && obstacles[j][0] == y-1) {
                                    if(max < (x*x + y*y) ){
                                        max = (x*x + y*y);
                                    }
                                    break forout;
                                }
                            }
                            y--;                            
                        }


                    } else {
                        forout:
                        for(int z = 1; z <= commands[i]; z++) {
                            for(int j = 0; j < obstacles.length; j++) {
                                if(obstacles[j][0] == y && obstacles[j][1] == x-1) {
                                    if(max < (x*x + y*y) ){
                                        max = (x*x + y*y);
                                    }
                                    break forout;
                                }
                            }
                            x--;
                        }
                    }


                }
                if(max < (x*x + y*y) ){
                    max = (x*x + y*y);
                }
            }
            
        }
        
        System.out.println(x);
        System.out.println(y);
        
        return max;
        
        
        
        
    
    }
}

public class MainClass {
    public static int[] stringToIntegerArray(String input) {
        input = input.trim();
        input = input.substring(1, input.length() - 1);
        if (input.length() == 0) {
          return new int[0];
        }
    
        String[] parts = input.split(",");
        int[] output = new int[parts.length];
        for(int index = 0; index < parts.length; index++) {
            String part = parts[index].trim();
            output[index] = Integer.parseInt(part);
        }
        return output;
    }
    
    public static int[][] stringToInt2dArray(String input) {
        JsonArray jsonArray = JsonArray.readFrom(input);
        if (jsonArray.size() == 0) {
          return new int[0][0];
        }
    
        int[][] arr = new int[jsonArray.size()][];
        for (int i = 0; i < arr.length; i++) {
          JsonArray cols = jsonArray.get(i).asArray();
          arr[i] = stringToIntegerArray(cols.toString());
        }
        return arr;
    }
    
    public static void main(String[] args) throws IOException {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        String line;
        while ((line = in.readLine()) != null) {
            int[] commands = stringToIntegerArray(line);
            line = in.readLine();
            int[][] obstacles = stringToInt2dArray(line);
            
            int ret = new Solution().robotSim(commands, obstacles);
            
            String out = String.valueOf(ret);
            
            System.out.print(out);
        }
    }
}
