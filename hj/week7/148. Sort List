/* -----------------------------------
 *  WARNING:
 * -----------------------------------
 *  Your code may fail to compile
 *  because it contains public class
 *  declarations.
 *  To fix this, please remove the
 *  "public" keyword from your class
 *  declarations.
 */

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    
    private int heapSize = 0;
    private int[] itemHeap;

    public ListNode sortList(ListNode head) {
        
        ListNode dummy = head;
        
        int cnt = 0;
        
        while(dummy != null) {
            cnt++;
            dummy = dummy.next;
        }
        
        int[] a = new int[cnt];

        cnt = 0;
        
        while(head != null) {
            a[cnt] = head.val;
            head = head.next;
            cnt++;
        }
        
        itemHeap = new int[cnt+1];    
        
        for (int i = 0; i < a.length; i++) {
            insertHeap(a[i]);
        }
 
        for (int i = a.length - 1; i >= 0; --i) {
            a[i] = deleteHeap();
 
        }

        
        
        
        ListNode dummys = new ListNode(0);
        
        ListNode b = dummys;
        ListNode result = b;
        
        for(int i =0; i<a.length; i++) {
            ListNode val = new ListNode(a[i]);
            b.next = val;
            b = b.next;
        }
        
        return result.next;
    }
    
    
    public void insertHeap(int item) {
        int i = ++heapSize;
 
        while ((i != 1) && (item > itemHeap[i / 2])) {
            itemHeap[i] = itemHeap[i / 2];
            i /= 2;
        }
 
        itemHeap[i] = item;
    }

    public int deleteHeap() {
        int parent, child;
        int item, tmp;
        item = itemHeap[1];
        tmp = itemHeap[heapSize--];
        parent = 1;
        child = 2;
 
        while (child <= heapSize) {
            if ((child < heapSize) && (itemHeap[child] < itemHeap[child + 1]))
                child++;
 
            if (tmp >= itemHeap[child])
                break;
 
            itemHeap[parent] = itemHeap[child];
            parent = child;
            child *= 2;
        }
 
        itemHeap[parent] = tmp;
        return item;
    }


    
    
}

public class MainClass {
    public static int[] stringToIntegerArray(String input) {
        input = input.trim();
        input = input.substring(1, input.length() - 1);
        if (input.length() == 0) {
          return new int[0];
        }
    
        String[] parts = input.split(",");
        int[] output = new int[parts.length];
        for(int index = 0; index < parts.length; index++) {
            String part = parts[index].trim();
            output[index] = Integer.parseInt(part);
        }
        return output;
    }
    
    public static ListNode stringToListNode(String input) {
        // Generate array from the input
        int[] nodeValues = stringToIntegerArray(input);
    
        // Now convert that list into linked list
        ListNode dummyRoot = new ListNode(0);
        ListNode ptr = dummyRoot;
        for(int item : nodeValues) {
            ptr.next = new ListNode(item);
            ptr = ptr.next;
        }
        return dummyRoot.next;
    }
    
    public static String listNodeToString(ListNode node) {
        if (node == null) {
            return "[]";
        }
    
        String result = "";
        while (node != null) {
            result += Integer.toString(node.val) + ", ";
            node = node.next;
        }
        return "[" + result.substring(0, result.length() - 2) + "]";
    }
    
    public static void main(String[] args) throws IOException {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        String line;
        while ((line = in.readLine()) != null) {
            ListNode head = stringToListNode(line);
            
            ListNode ret = new Solution().sortList(head);
            
            String out = listNodeToString(ret);
            
            System.out.print(out);
        }
    }
}
