/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} head
 * @return {ListNode}
 */
var sortList = function(head) {
    

    if(!head || !head.next)
        {
            return head;
        }
    
    let temp = head;
    let prev = head;
    let next = head;
    
    while(next !== null && next.next !== null)
        {
            temp = prev;
            prev = prev.next;
            next = next.next.next;
        }
    
    temp.next = null;
    
    let left = sortList(head);
    let right = sortList(prev);
    
    return merge(left, right);
    
};

var merge = function(h1, h2)
{
    let l = new ListNode(null);
    
    const pre = l;
    
    while(h1 !=null && h2 != null)
        {
            if(h1.val< h2.val)
            {
                l.next = h1;
                h1 = h1.next;
            }
            else {
                l.next = h2;
                h2 = h2.next;
            }
            
            l = l.next;
        }
    
    l.next = h1 || h2;
    
    return pre.next;
}

