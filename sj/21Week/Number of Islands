class Solution {
    public int numIslands(char[][] grid) {
        
    if (grid == null || grid.length == 0 || grid[0].length == 0) return 0;
        
    int count = 0, m = grid.length, n = grid[0].length;
        
    for (int i = 0; i < m; i++) 
    {
        for (int j = 0; j < n; j++) 
        {
            if (grid[i][j] == '1') 
            {
                dfs(grid, i, j, m, n);
                count++;
            }
        }
    }
        
    return count;
        
    }
    
   private void dfs(char[][] grid, int row, int col, int m, int n) 
   {
        if (row < 0 || row >= m || col < 0 || col >= n) return;
       
       System.out.println(grid[row][col]);
       
        if (grid[row][col] != '1') 
        {
            return ;
        }
       
        grid[row][col] = '3';
       
        dfs(grid, row + 1, col, m, n);
        dfs(grid, row - 1, col, m, n);
        dfs(grid, row, col + 1, m, n);
        dfs(grid, row, col - 1, m, n);
    }
}
